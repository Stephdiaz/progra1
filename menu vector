#include "stdafx.h"
#include <iostream>
#include "conio.h"
#include <algorithm>
#include <cmath>
#include <map>
#include <ctime>
#include <cstring>
#include <cstdio>
#define max 50
int fib[max];
void cargar(int a[],int num);
void frecuencia(int a[],int num);
void eliminar(int a[],int num);
void secuencia(int a[],int num);
void sumarvectores(int a[],int b[],int num);
void recorrerarriba(int a[],int num);
void recorrerabajo(int a[],int num);
bool verificar(int c[], int num,int elem);
void insertarSort(int a[], int num);
void mostrar(int a[], int num);
void unionvec(int a[], int b[], int c[], int na, int nb, int &nc);
bool existe(int a[], int num, int obj);
void fvector(int v[], int num);
void invertirv(int a[], int num);
int calcularFib(int num);
int invertir (int num);
int enesimoPrimo(int num);
bool esPrimo(int num);
void operaciones(int a[], int b[], int num);
using namespace std;
void main ()
{ int op,num,a[max],r,b[max],na,nb,c[max],nc;
	do{
		cout<<"..................MENU..............."<<endl;
		cout<<"1.frecuencia en un vector"<<endl;
		cout<<"2.insertar de manera ordenada"<<endl;
		cout<<"3.eliminar numero de un vector"<<endl;
		cout<<"4.busqueda secuencial"<<endl;
		cout<<"5.sumar vectores"<<endl;
		cout<<"6.recorrer hacia arriba"<<endl;
		cout<<"7.recorrer hacia abajo"<<endl;
		cout<<"8.union de vectores"<<endl;
		cout<<"9.completar vector"<<endl;
		cout<<"10.conjunto de operacione"<<endl;
		cout<<"11.salir"<<endl;
		cin>>op;
	}while ((op<=0)||(op>11));
switch (op){
case 1: {cout<<"ingrese cantidad de digitos"<<endl;
		cin>>num;
		cout<<"Cargar vector"<<endl;
		cargar(a,num);
		frecuencia(a,num);}break;
  case 2:{cout << "Ingrese la cantidad de elementos en el vector" << endl;
          cin >> num;
		cargar(a, num);
		 insertarSort(a,num);
		cout << "El vector ordenado es: ";
		mostrar(a, num);}
		cout << endl;
                break;
case 3: {cout<<"ingrese cantidad de digitos"<<endl;
		cin>>num;
		cout<<"Cargar vector"<<endl;
		cargar(a,num);
		eliminar(a,num);}break;
case 4: {cout<<"ingrese cantidad de digitos"<<endl;
		cin>>num;
		cout<<"Cargar vector"<<endl;
		cargar(a,num);
		secuencia(a,num);}break;
case 5: {cout<<"ingrese cantidad de digitos"<<endl;
		cin>>num;
		cout<<"Cargar primer vector"<<endl;
		cargar(a,num);
		cout<<"Cargar segundo vector"<<endl;
		cargar(b,num);
		sumarvectores(a,b,num);}break;
case 6: {cout<<"ingrese cantidad de digitos"<<endl;
		cin>>num;
		cout<<"Cargar vector"<<endl;
		cargar(a,num);
		recorrerarriba(a,num);}break;
case 7: {cout<<"ingrese cantidad de digitos"<<endl;
		cin>>num;
		cout<<"Cargar vector"<<endl;
		cargar(a,num);
		recorrerabajo(a,num);}break;
case 8: {cout<<"ingrese cantidad de digitos del primer vector"<<endl;
		cin>>na;
		cout<<"Cargar primer vector"<<endl;
		cargar(a,na);
		cout<<"ingrese cantidad de digitos del primer vector"<<endl;
		cin>>nb;
		cout<<"Cargar segundo vector"<<endl;
		cargar(b,nb);
		unionvec(a,b,c,na,nb,nc);
		cout << "El resultado de la union es: " << endl;
                mostrar(c, nc);
                cout << endl;}break;
case 9:{cout << "Ingrese la cantidad de elementos del vector" << endl;
        cin >> num;
        fvector(a, num);
        cout << "El vector rellenado es: "<< endl;
		mostrar(a, num);
		cout << endl;}
                break;
case 10:{cout << "Ingrese la cantidad de elementos del vector" << endl;
		cin >> num;
         cargar(a, num);
         operaciones(a, b, num);
		 cout << "El nuevo vector es: " << endl;
		 mostrar(a, num);}
         break;
}getch();
}



	void cargar(int a[],int num)
	{
		cout<<"Introducir valores"<<endl;
		for (int i=0;i<num;i++)
		{ 
		cin>>a[i];}
	}

	void frecuencia(int a[],int num)
	{	int	c,j, i ,acum=0;
	cout<<"Ingrese numero que desea ver su frecuencia"<<endl;
	cin>>c;
	for (i=0;i<num;i++){
		if(c==a[i]){
			acum ++;}
	}
			
		cout<<"el numero "<<c<<" se repite "<<acum<<" veces "<<endl;
	}
	
	void eliminar(int a[],int num)
	{ int c,i,aux=0,b[max];
		cout<<"Ingrese numero que desea eliminar"<<endl;
		cin>>c;
		for (i=0;i<num;i++){
		if(a[i]!=c){
			b[aux]=a[i];
			aux++;}
		}cout<<"El nuevo vector es"<<endl;
		for(i=0;i<aux;i++)
		{
			cout<<b[i]<<" ";}
	}

	void secuencia(int a[],int num)
	{ int i,c;bool k=true;
	cout<<"Ingrese numero que desea ubicar"<<endl;
		cin>>c;
		for (i=0;i<num;i++){
		if(a[i]==c){
			k=false;
			cout<<"la ubicacion se encuentra en el vector numero "<<i;
		}}
		if (k==true)
			cout<<"no se encuentra el numero "<<"-1";
		
	}

	void sumarvectores(int a[],int b[],int num)
	{
		int c[max],i,aux;
		for (i=0;i<num;i++)
		{
			c[i]=a[i]+b[num-i-1];
			
		}
	for (i=0;i<num/2;i++)
		{
			aux=c[i];
			c[i]=c[num-1-i];
			c[num-1-i]=aux;
		}
		for (i=0;i<num;i++)
		{
			cout<<c[i]<<" ";
		}
	}
	void recorrerarriba(int a[],int num)
	{int i,b[max];
		b[num-1]=a[0];
		for (i=1;i<num;i++)
		{b[i-1]=a[i];}
		for (i=0;i<num;i++){
			cout<<b[i]<<" ";
		}
	}
	void recorrerabajo(int a[],int num)
	{int i,b[max];
		b[0]=a[num-1];
		for (i=0;i<num;i++)
		{b[i+1]=a[i];}
		for (i=0;i<num;i++){
			cout<<b[i]<<" ";
		}
	}

	bool verificar(int c[], int num,int elem)
	{
		int i;
		bool k=false;
		for(i=0;i<num;i++){
			if(c[i]==elem)
			{k=true;}
	} return k;
	}

void unionvec(int a[], int b[], int c[], int tamA, int tamB, int &tamC)
{
    tamC = 0;
    for (int i = 0; i < tamA; ++i)
    {
        if (!existe(c, tamC, a[i]))
        {
            c[tamC] = a[i];
            ++tamC;
        }
    }
 
    for (int i = 0; i < tamB; ++i)
    {
        if (!existe(c, tamC, b[i]))
        {
            c[tamC] = b[i];
            ++tamC;
        }
    }
 
}
void insertarSort(int a[], int num)
{
    int j, temp;
    for (int i = 0; i < num; i++)
    {
        j = i;
        while (j > 0 && a[j] < a[j-1])
        {
            temp = a[j];
            a[j] = a[j-1];
            a[j-1] = temp;
            j--;
        }
    }
}
void mostrar(int a[], int num)
{
    for (int i = 0; i < num; ++i) cout << a[i] << " ";
    cout << endl;
}
bool existe(int a[], int num, int obj)
{
    for (int i = 0; i < num; ++i)
    {
        if (a[i] == obj) return true;
    }
    return false;

}
void invertirv(int a[], int num)
{
    for (int i = 0; i < num/2; ++i)
    {
        swap(a[i], a[num-i-1]);
    }
}
void fvector(int v[], int num)
{
	int a[max], tamA = num/2, b[max], tamB = num - tamA;
    for (int i = 0; i < tamA; ++i)
    {
        a[i] = calcularFib(i);
    }
    for (int i = 0; i < tamB; ++i)
    {
        b[i] = enesimoPrimo(i+1);
    }
    invertirv(a, tamA);
    invertirv(b, tamB);
    unionvec(b, a,v, tamA, tamB, num);
 
}
 
void operaciones(int a[], int b[], int num)
{
    int aux;
    for (int i = 0; i < num; ++i)
    {
        aux = a[i];
        b[i] = 0;
        while (aux)
        {
            if (aux%10 == 1 || aux%10 == 3 || aux%10 == 5) b[i] = b[i]*10 + aux%10;
            aux /= 10;
        }
        b[i] = invertir(b[i]);
    }
}
int calcularFib(int num)
{
    if (num == 0 || num == 1) return 1;
    if (fib[num] != -1) return fib[num];
    fib[num] = calcularFib(num-1) + calcularFib(num-2);
    return fib[num];
}
int enesimoPrimo(int num)
{
    int c = 0, i;
    for (i = 1; c != num; ++i)
    {
        if (esPrimo(i)) ++c;
    }
    return i - 1;
}
bool esPrimo(int num)
{
    if (num == 0) return false;
    if (num == 1) return true;
    for (int i = 2; i < num; ++i)
        if (num%i == 0) return false;
    return true;
}
int invertir (int num)
{
    int res = 0;
    while (num)
    {
        res = res*10 + num%10;
        num /= 10;
    }
    return res;
}
